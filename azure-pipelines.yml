trigger:
  batch: true
  branches:
    include:
      - master
      - develop
      - azure-arm
  paths:
    exclude:
      - README.md
      - doc/*
      - .github/*

pr:
  branches:
    include:
      - develop
      - master
  paths:
    exclude:
      - README.md
      - doc/*

variables:
  - group: 'External Resources'
  - name: vmImage
    value: 'ubuntu-16.04'  # see https://docs.microsoft.com/en-us/azure/devops/pipelines/agents/hosted?view=azure-devops&tabs=yaml&viewFallbackFrom=vsts

stages:
- stage: Build
  jobs:
  - job: Core
    pool:
      vmImage: $(vmImage)

    steps:

    - task: petersendev.dotnet-global-tool-installer.DotnetGlobalToolInstaller.DotnetGlobalToolInstaller@0
      displayName: 'install housework'
      inputs:
        name: housework

    - script: 'housework author src/*.csproj -s build.ini -r'
      displayName: 'author projects'

    - script: 'housework setbuildnumber %Version% -s build.ini'
      displayName: 'set build number'

    - script: 'housework pushvars Version -s build.ini'
      displayName: 'push variables'

    - task: DotNetCoreCLI@2
      displayName: 'build all'
      inputs:
        projects: src/storage.sln
        arguments: '-c release'

    - task: DotNetCoreCLI@2
      displayName: 'Unit Tests'
      continueOnError: true
      inputs:
        command: test
        projects: test/Storage.Net.Tests/Storage.Net.Tests.csproj

    - task: CopyFiles@2
      displayName: 'copy generated nugets'
      inputs:
        SourceFolder: src
        Contents: '**/*.nupkg'
        TargetFolder: ' $(build.artifactstagingdirectory)'
        CleanTargetFolder: true
        OverWrite: true
        flattenFolders: true

    # we don't care if tests in other stages are not successful, we want to public this to internal testing
    - task: NuGetCommand@2
      displayName: 'push to internal feed'
      inputs:
        command: 'push'
        packagesToPush: '$(build.artifactstagingdirectory)/**/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '4bab84c0-90f7-4425-afc6-ba077aa9757e/0efacfd4-9b7e-4cfb-90c0-07824d6fbbf3'
        allowPackageConflicts: true


    - task: PublishBuildArtifacts@1
      displayName: 'publish nugets as artifacts'
      inputs:
        ArtifactName: nuget
      
- stage: Infra
  displayName: 'Build Test Infrastructure'
  dependsOn: []
  jobs:
  - job: Infra
    displayName: 'Build Test Infrastructure'
    steps:
    - task: AzureResourceManagerTemplateDeployment@3
      inputs:
        deploymentScope: 'Resource Group'
        azureResourceManagerConnection: 'PAYG (personal)'
        subscriptionId: 'e692471f-4dba-4d86-8940-ce6cca371941'
        action: 'Create Or Update Resource Group'
        resourceGroupName: 'vstsstoragenet'
        location: 'North Europe'
        templateLocation: 'Linked artifact'
        csmFile: 'infra/azure.json'
        deploymentMode: 'Incremental'
        deploymentOutputs: 'InfraOutput'
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $var = ConvertFrom-Json '$(InfraOutput)'
          $var
        failOnStderr: true
        pwsh: true
    - task: PowerShell@2
      inputs:
        filePath: 'infra/infraset.ps1'
        failOnStderr: true
        pwsh: true

- stage: Integration
  dependsOn: [ 'Infra' ]
  jobs:
  - job: Blobs
    displayName: 'Blobs'
    pool:
      vmImage: $(vmImage)
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'run tests'
      continueOnError: false
      inputs:
        command: test
        projects: test/Storage.Net.Tests.Integration/Storage.Net.Tests.Integration.csproj
        arguments: '-c release --filter Category=Blobs'
  - job: Messaging
    displayName: 'Messaging'
    pool:
      vmImage: $(vmImage)
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'run tests'
      continueOnError: false
      inputs:
        command: test
        projects: test/Storage.Net.Tests.Integration/Storage.Net.Tests.Integration.csproj
        arguments: '-c release --filter Category=Messenger'


- stage: Deploy
  dependsOn: ['Build', 'Integration'] 
  condition: "eq(variables['Build.SourceBranch'], 'refs/heads/master')"
  #condition: "or( eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/queuesvnext') )"
  jobs:
  - deployment: Nuget
    displayName: 'Push packages'
    pool:
      vmImage: $(vmImage)
    environment: live
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'nuget'
              downloadPath: '$(System.ArtifactsDirectory)'
          - task: NuGetCommand@2
            #condition: "or( eq(variables['Build.SourceBranch'], 'refs/heads/master'), eq(variables['Build.SourceBranch'], 'refs/heads/queuesvnext') )"
            displayName: nuget.org
            inputs:
              command: push
              packagesToPush: '$(System.ArtifactsDirectory)/nuget/*.nupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'nuget.org (aloneguid)'
          - task: GitHubRelease@1
            inputs:
               gitHubConnection: 'aloneguid'
               repositoryName: 'aloneguid/storage'
               action: 'create'
               target: '$(Build.SourceVersion)'
               tagSource: 'userSpecifiedTag'
               tag: '$(Build.BuildNumber)'
               changeLogCompareToRelease: 'lastFullRelease'
               changeLogType: 'commitBased'
